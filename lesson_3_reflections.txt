When would you want to create a remote repository rather than keeping all your work local?
If I want to share my work with someone or do a collaborative project, then it makes more sense to have a remote repository. Moreover, having a remote repository is kind of a fail-safe approach in case some failure happens on my local system.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Let's say I am collaborating with a friend who pushes his/her changes to Github. Now if Git automatically pulls changes it might override my local changes which is not what I want to happen. Having manual pull gives me more control on version-control.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are clones of repositories on Github in order to take someone's code and modify it for yourself. It allows the creator to get the credit for his/her code. Moreover, I can make my changes public on my own github profile. Clones are used more generically as in I can clone a remote to my local, or my one local to another local. I would use this to have a local copy of my own remote so that I can edit things when I am offline too. Branches are needed on a single repository when I need to code a different feature without disturbing my working code.

What is the benefit of having a copy of the last known state of the remote stored locally?
It is good to have the last known state of the remote stored locally because then you can keep updating your local master branch and be in sync with other collaborators.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I guess it would be easier if I am working alone on a simple project with a couple of features. But as things become massive and complicated, I will need a version-control system. Moreover, if I am collaborating then not using git would be disastrous as the work would have to go linearly and not in parallel.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Making changes in a separate branch is good when I am working on an experimental feature that I want to get reviewed by someone before merging it with the master branch. Because this could break the master branch, it is better to get it reviewed by someone. On the other hand, if I am fixing a normal bug on the master branch that is going to stay as the "production code", then I might as well stick to the master branch. Adding this workflow so that I remember:
"""
Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.
"""

